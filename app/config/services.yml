# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    micro.service.buildingupdate.class: MicroBundle\Services\BuildingUpdateService
    micro.service.mycompany.class: MicroBundle\Services\MyCompanyService
    micro.service.prepareHtmlToPdf.class: MicroBundle\Services\PrepareHtmlToPdfService
    micro.service.parameters.class: MicroBundle\Services\ParametersService
    micro.service.serialize.class: MicroBundle\Services\SerializeService
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/MicroBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    MicroBundle\:
        resource: '../../src/MicroBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/MicroBundle/{Entity, Repository, Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    MicroBundle\Controller\:
        resource: '../../src/MicroBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    MicroBundle\Repository\:
        resource: '../../src/MicroBundle/Repository'

    # add more services, or override services that need manual wiring
    # MicroBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    micro:
        class: %micro.service.buildingupdate.class%
        arguments: ['@doctrine.orm.default_entity_manager']
        public: true

    mycompany:
        class: %micro.service.mycompany.class%
        public: true

    prepareHtmlToPdf:
        class: %micro.service.prepareHtmlToPdf.class%
        public: true

    parameters:
        class: %micro.service.parameters.class%
        public: true

    serialize:
        class: %micro.service.serialize.class%
        public: true

    MicroBundle\Services\FileUploader:
        arguments:
            $targetDirectory: '%target_directory%'


